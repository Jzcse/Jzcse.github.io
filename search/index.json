[{"content":"从零开始搭建pytorch环境 前言 在最近的人工智能课程上，我完成了从零搭建人工智能运行环境以及测试的相关流程，已经写完了实验报告，但是因为教师要求将自己的思考过程写在报告里，直接将报告的内容搬过来并不是一个好的选择，于是我决定重新写这一篇文章，力求用最简单、清晰的流程让你完成环境的搭建。\n总览 本教程包含：\n显卡驱动的安装 CUDA的安装 Anaconda的安装及部分教程 pytorch的安装 pytorch的测试 适用与想在Windows操作环境下使用显卡训练pytorch相关模型的学生。\nWindows环境下的操作都相对简单，所以不要担心。\n本人刚刚进行人工智能相关的学习，如有错误，还望指出。\n显卡驱动的安装 这里主要针对N卡的显卡驱动，其他显卡驱动请查看其他文章。 一般来说，电脑是自带有英伟达显卡驱动的，可以通过在命令提示框运行以下命令来查看是否已经安装显卡驱动。\n1 nvidia-smi 如果已经正确安装英伟达驱动，你将看到以下界面。 如果没有，请自行前往英伟达官网或英伟达 App下载与安装对应版本的显卡驱动，知直到出现上述图片内容。\nCUDA的安装 什么是CUDA 在正式安装CUDA之前，我们先来介绍一下什么CUDA。 CUDA(Compute Unified Device Architecture，计算统一设备架构)，是Nvidia开发的并行计算平台和编程模型，核心作用是让开发者能够利用Nvidia GPU的并行计算能力。在pytorch中，CUDA可以帮助pytorch调用GPU加速矩阵运算，所以是我们接下来运行pytorch项目的关键工具。\n安装CUDA 首先，根据刚才使用的nvidia-smi获得的信息，我们需要知道当前显卡驱动能支持的最高版本的CUDA，根据刚才的图片，可以知道，我的显卡驱动最高支持到13.0版本。\n我们在这里只需要记住这个版本号即可，我不会让你们前往Nvidia挂网下载对应版本的CUDA工具包，关于原因，相信你在下文中会清楚的。\nAnaconda的安装 什么是Anaconda 准确来说，Anaconda是一个工具包，其包含Conda，Anaconda Navigator与一些常用的数据科学库。\nConda，是一个环境与包管理工具，类似于npm与pip，它可以管理当前项目所需要的包/依赖，而Conda比pip更高级的地方是，它可以通过虚拟环境管理更多版本的Python解释器！真正让我们能够一个项目对应一个解释器与依赖。\n这里不再解释什么是虚拟环境，为什么要有虚拟环境，网上的解释或如今的AI能够解决我们的大部分问题。\n当然如果你仅仅是想要稍微尝试一下torch，你当然可以不安装Anaconda而仅仅使用全局环境下的python解释器，当然我不推荐你这么做。\nAnaconda Navigator，为初识Conda的学习者提供了图形化界面，它能帮助我们创建、管理虚拟环境，打开对应IDE等等。\n安装Anaconda 对Windows环境，我们直接前往Anaconda官网，界面如下图。\n点击\u0026quot;Get Started\u0026quot;注册并登录后就可以进入下载页了，选择Windows版本进行下载。\n当然如果你不想登录，在地址栏后面添加\u0026quot;/success\u0026quot;就可以跳过验证(doge)。\n接下来按照指引完成安装即可，需要注意的是，Anaconda已经不推荐将其添加到环境变量了，我们听取它的建议。\n安装好后，你在开始菜单下，应该可以看见这样的几个程序，如图。\n这样就说明我们已经安装好了。\nAnaconda基础教程 打开Anaconda PowerShell Prompt或者Anaconda Prompt，Anaconda将自动为你启用基虚拟环境，即在路径前可以看到(base)字样。该虚拟环境自带python 3.13。\n为了以后方便，我们创建一个新的虚拟环境。使用下面的命令创建新的环境。\n1 conda create -n \u0026lt;env-name\u0026gt; 使用下面的命令激活/切换到其他虚拟环境.\n1 conda activate \u0026lt;env-name\u0026gt; 在上述命令执行成功后，你应该可以看到(base)变成了(\u0026lt;env-name\u0026gt;)。\n使用下面的命令关闭当前虚拟环境。\n1 conda deactivate conda会自动切换回base虚拟环境。\n你也可以使用下面的命令查看当前已经创建了哪些虚拟环境。\n1 conda env list 效果如图。\n当然，你完全可以使用Anaconda Navigator的图形化界面！\n下载Python 我们假设你已经创建好了一个虚拟环境，这里我用temp统称。\n现在，我们激活到temp环境下，输入以下命令安装python。\n1 conda install python=3.12 这里我们下载3.12版本的python，其他版本的应该也可以，为了不必要的麻烦，还请跟着3.12做一遍。\n安装好后，运行以下命令检查是否安装成功。\n1 python -V 如果成功返回python版本号，说明已经安装成功啦！\n使用以下命令查看当前环境下已经下载了哪些东西。\n1 conda list 安装torch 前面说到，我没有让你们下载单独CUDA，因为当前的torch包中已经预编译了相应的CUDA，就算我们安装了CUDA，torch也不会使用我们单独安装的CUDA，不如不装，但是，我希望你们能够了解CUDA在这里面的作用。\n如果你使用以下命令，那么pip会帮你安装仅支持CPU运行的torch的包，这里列出，不推荐。\n1 pip install torch torchvision 我们下载支持CUDA（已经预编译CUDA，支持GPU运行）的torch包。 前往torch官网下载页，选择适合您机器的版本，复制下面的命令键入到命令行中执行即可。\n推荐pip，如果您的显卡驱动不支持表中的CUDA版本，建议安装更高版本的显卡驱动，虽然你也可以安装torch更早的版本。\n检测是否可用 在命令行中键入以下命令查看当前python已经下载哪些包。\n1 pip list 你将看到torch与torchvision在列表中。\n接下来，启动python的命令行模式。\n1 python 依次执行。\n1 import torch 1 torch.cuda.is_available() 如果返回的结果是True的话，恭喜你，你已经完成了torch的安装，不然，请您检查前面的步骤。\n运行torch的示例代码 这里假设您会使用git命令以及知道如何使用虚拟环境下的python执行python文件。\n项目地址为cnn_example。\n这里提醒一下，请按照项目的README顺序执行代码。\n另外，项目中的部分语法与现在的有些不同，如果你没有python基础，看到报错信息后可以将报错信息复制给AI，按照AI的修改建议修改代码即可。\n","date":"2025-09-15T21:44:11+08:00","image":"https://jzcse.github.io/p/%E6%95%99%E7%A8%8B%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BApytorh%E7%8E%AF%E5%A2%83/img/cover_hu_d7d1d069baa71594.png","permalink":"https://jzcse.github.io/p/%E6%95%99%E7%A8%8B%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BApytorh%E7%8E%AF%E5%A2%83/","title":"【教程】从零开始搭建pytorh环境"},{"content":"Nonebot + Lagrange 实现自己的QQ机器人 最近看到有一些朋友自己设计了一些QQ机器人用于管理QQ群与增加群活跃度等，于是想着自己研究一下这些东西怎么做，一边研究，一边也写篇文章，分享一下以便大家可以快速上手。\n另外，网上其实是有很多相关教程的，但个人感觉不够深入，如果有时间，我希望在这篇文章的后半部分详细深入说一说并加入一些实践案例。\n这篇文章主要面对的是Windows系统。Linux与MacOS当然也可以，只是我没有相应的系统，没办法作演示。\n搭建 Lagrange 安装 首先，我们安装Lagrange程序。 在Github上找到Lagrange程序，下载最新版本的 Lagrange.Onebot。 【Lagrange.Onebot】 我这里是Windows 11的64位系统，下载如图所示的压缩包。 解压后会得到好多级文件夹，在最里面可以找到我们最关心的 Lagrange.Onebot.exe文件。 将其转移到我们的项目文件夹下。 双击运行程序，程序会启动一个命令行窗口，你将看到如下界面。 此时，在项目根目录下，Lagrange帮我们生成了一个appsetting.json文件，我们需要对其进行配置，将下面的配置替换到配置文件中。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 { \u0026#34;Logging\u0026#34;: { \u0026#34;LogLevel\u0026#34;: { \u0026#34;Default\u0026#34;: \u0026#34;Information\u0026#34;, \u0026#34;Microsoft\u0026#34;: \u0026#34;Warning\u0026#34;, \u0026#34;Microsoft.Hosting.Lifetime\u0026#34;: \u0026#34;Information\u0026#34; } }, \u0026#34;SignServerUrl\u0026#34;: \u0026#34;https://sign.lagrangecore.org/api/sign/25765\u0026#34;, \u0026#34;MusicSignServerUrl\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Account\u0026#34;: { \u0026#34;Uin\u0026#34;: 0, \u0026#34;Password\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;Protocol\u0026#34;: \u0026#34;Linux\u0026#34;, \u0026#34;AutoReconnect\u0026#34;: true, \u0026#34;GetOptimumServer\u0026#34;: true }, \u0026#34;Message\u0026#34;: { \u0026#34;IgnoreSelf\u0026#34;: true, \u0026#34;StringPost\u0026#34;: false }, \u0026#34;QrCode\u0026#34;: { \u0026#34;ConsoleCompatibilityMode\u0026#34;: false }, \u0026#34;Implementations\u0026#34;: [ { \u0026#34;Type\u0026#34;: \u0026#34;ReverseWebSocket\u0026#34;, \u0026#34;Host\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;Port\u0026#34;: 8080, \u0026#34;Suffix\u0026#34;: \u0026#34;/onebot/v11/ws\u0026#34;, \u0026#34;ReconnectInterval\u0026#34;: 5000, \u0026#34;HeartBeatInterval\u0026#34;: 5000, \u0026#34;AccessToken\u0026#34;: \u0026#34;\u0026#34; } ] } 关于上面的配置，后面我们可能会进行说明，这里就不做介绍了。 按照要求，配置之后，在命令行窗口中按下任意键继续程序。之后你将看到一个偌大的二维码，你需要使用需要充当机器人的QQ账号扫描二维码进行登录。 当你看到这些信息时，说明你已经成功登录了。 最后，Lagrange在项目根目录下生成了好多文件。我们暂时不用管。\nNoneBot2 安装 注意，我们使用的Python版本要大于等于3.9，如果你没有安装Python，请先安装。如果已经安装python，请使用\n1 python --version 查看版本号。\n检查版本号大于等于3.9后，让我们进行接下来的步骤。\n创建虚拟环境 在项目的根目录下，使用下面的命令创建虚拟环境。\n1 python -m venv .venv 创建完成后，我们需要激活虚拟环境。\n1 .venv\\Scripts\\activate 激活成功后，你会发现命令行窗口的前缀变成了虚拟环境的名称。 ❓为什么要使用虚拟环境？参阅此处 在这种情况下，我们使用\n1 pip list 理论上返回的包依赖列表中应该只会有pip这一个包。\n安装NoneBot2官方脚手架 在激活虚拟环境后，我们使用下面的命令安装NoneBot2。\n1 pip install nb-cli 安装完成后，我们可以使用下面的命令检查是否安装成功。\n1 pip list 理论上返回的包依赖列表中应该会有nb-cli这个包。\n创建项目 使用下面的命令创建项目。\n1 nb create 按照提示，我们依次选择\nsimple 输出您的项目名称，这里我输入QQBot 选择OneBot V11适配器 选择FastAPI驱动器 选择插件存储位置为src 键入Y立即安装依赖 因为我们已经在虚拟环境下，所以这里我们不在创建虚拟环境，键入n。 接下来他会询问选择那些内置的插件，这里我们什么都不选择。 创建成功，你会看到如下界面。 按照提示，我们进入项目目录并启动我们的机器人。 1 2 cd QQBot nb run --reload 注意，这里我们需要同时运行lagrange与nonebot。 现在，我们的机器人已经启动成功了！你可以在命令行窗口看到connection open，说明Lagrange已经与nonebot建立了连接。 恭喜你，你已经成功搭建了一个基于NoneBot2的QQ机器人！\n测试 在src/plugins目录下新建test.py文件，写入以下内容\n1 2 3 4 5 6 7 8 9 10 11 from nonebot import on_regex from nonebot.typing import T_State from nonebot.adapters.onebot.v11 import GroupMessageEvent, Bot, Message Test = on_regex(pattern=r\u0026#39;^test$\u0026#39;,priority=1) @Test.handle() async def Test_send(bot: Bot, event: GroupMessageEvent, state: T_State): msg = \u0026#34;我启动成功啦！！！\u0026#34; await Test.finish(message=Message(msg)) 保存后，在有该QQ号的群里发送test，机器人就会回复我启动成功啦！！！，说明我们已经成功搭建好了我们的QQ机器人。\n✔️先写这些吧，后续会再进行内容的补充！\n","date":"2025-08-01T17:29:13+08:00","image":"https://jzcse.github.io/p/%E6%95%99%E7%A8%8Bnonebot--lagrange-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84qq%E6%9C%BA%E5%99%A8%E4%BA%BA/img/cover_hu_80b922a47e643813.png","permalink":"https://jzcse.github.io/p/%E6%95%99%E7%A8%8Bnonebot--lagrange-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84qq%E6%9C%BA%E5%99%A8%E4%BA%BA/","title":"【教程】Nonebot + Lagrange 实现自己的QQ机器人"},{"content":"【教程】Hugo + Github免费搭建博客 Hugo博客搭建 下载Hugo Hugo官方网站 点我跳转\n点击导航栏Github跳转到Hugo的Github开源仓库，或者直接点击此处跳转\n点击Tags选择合适版本后下载对应系统的压缩包，本教程以编写时最新版本0.148.1为例，下载的包名为hugo_extended_0.148.1_windows-amd64.zip\n解压后得到如图所示文件\n这样，我们的Hugo就下载好了！\n启动Hugo 在Hugo目录下启动命令提示符/Powershell，执行以下命令\n1 ./hugo.exe new site \u0026lt;Your Folder Name\u0026gt; 这会在目录下创建一个文件夹，里面存放了你的博客网站的一些配置与文件，另外，在命令提示符中还出现了让我们感兴趣的步骤，通过这些步骤，我们就可以完成自己的博客页搭建了！\n下载与安装主题 如果你迫不及待的想要看一看自己的网站，我们直接跳到第5步，使用\n1 2 cd \u0026lt;Your Folder Name\u0026gt; ./hugo.exe server --buildDrafts 你会看到如下结果\n熟悉前端开发的一定对http://localhost:1313不陌生，直接在浏览器中打开这个网址就可以看到我们的网站啦！然而，不出意外，我们看到的都是Page Not Found 字样，不要怕，这是是因为我们还没有安装主题！让我们回到第2步。\n跳转到第二步的网页，或者在Hugo官网导航栏点击Themes。 点此跳转\n选择你喜欢的主题进行下载并解压到\u0026lt;Your Folder Name\u0026gt;/themes下。这里我们使用stack主题为例。\n接下来，第3步，Hugo要求我们更改hugo.toml配置文件，在里面添加theme属性，其值为主题名称（即对应主题的文件夹名称）。\nthemes下我的主题文件夹名为stack，所以我们在hugo.toml里添加一行配置。\n1 theme = \u0026#34;stack\u0026#34; 全部完成后，让我们再一次使用第5步，打开我们的网站，就会发现我们的网页有了一些内容！\n写我的第一篇博客 我们的网站已经初具雏形，是时候写一篇文章试试手啦！\n按照第4步，使用如下命令\n1 ./hugo.exe new content \u0026lt;SECTIONNAME\u0026gt;\\\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt; 这里为演示，我创建了post/my-first-post.md，hugo会在\u0026lt;Your Folder Name\u0026gt;下建立新的文件，如你所写，我们可以在文件资源管理器中找到并对其做一些修改。\n最后，让我们再次运行第5步，看一看最终的效果怎么样吧！\n可以看到，我们已经添加了一条新的博客，并且可以阅读其详细内容啦！\n主题配置 有些朋友可能会问，为什么我的页面看起来那么草率，一点也不华丽。别急，因为我们没告诉它要长什么样子，它索性就什么也不展示。那要如何告诉主题展示其他的控件呢？还记得我们配置文件嘛，我们需要更改配置文件来告诉主题。我们还是以stack主题为例。\n关于Hugo支持哪些配置以及配置的最全解释，可以参阅Hugo的config文档，点此跳转\n幸运的是，stack的作者在源码文件夹里为我们提供了网站demo，其中包含作者已经准备好的配置文件，问哦们可以直接拿来用。\n值得注意的是，作者使用的是yaml格式的配置文件，而我们使用的是toml格式，我们需要对其进行转换。因为Hugo支持多种配置文件格式，直接将作者使用的替换掉我们的并做一些修改也是可以的。\n这里选用第二种方式。部分配置如下（为避免出现不必要的问题，请不要直接复制粘贴这里的代码）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 baseurl: https://example.com/ languageCode: en-us theme: stack title: Example Site copyright: Example Person # Theme i18n support # Available values: ar, bn, ca, de, el, en, es, fr, hu, id, it, ja, ko, nl, pt-br, th, uk, zh-cn, zh-hk, zh-tw DefaultContentLanguage: en # Set hasCJKLanguage to true if DefaultContentLanguage is in [zh-cn ja ko] # This will make .Summary and .WordCount behave correctly for CJK languages. hasCJKLanguage: false languages: en: languageName: English title: Example Site weight: 1 params: sidebar: subtitle: Example description zh-cn: languageName: 中文 title: 演示站点 weight: 2 params: sidebar: subtitle: 演示说明 pagination: pagerSize: 3 ### Custom menu ### See https://stack.jimmycai.com/config/menu ### To remove about, archive and search page menu item, remove `menu` field from their FrontMatter menu: main: [] social: - identifier: github name: GitHub url: https://github.com/CaiJimmy/hugo-theme-stack params: icon: brand-github - identifier: twitter name: Twitter url: https://twitter.com params: icon: brand-twitter related: includeNewer: true threshold: 60 toLower: false indices: - name: tags weight: 100 - name: categories weight: 200 markup: goldmark: extensions: passthrough: enable: true delimiters: block: - - \\[ - \\] - - $$ - $$ inline: - - \\( - \\) renderer: ## Set to true if you have HTML content inside Markdown unsafe: true tableOfContents: endLevel: 4 ordered: true startLevel: 2 highlight: noClasses: false codeFences: true guessSyntax: true lineNoStart: 1 lineNos: true lineNumbersInTable: true tabWidth: 4 这里选择几个解释一下，关于其他的更复杂的配置可以在将来有需要时查看文档进行进一步设置。\ntitle 网站标题\ncopyright 版权标识\nDefaultContentLanguage 网站默认语言，注意，若使用简体中文zh-cn需要将hasCJKLanguage配置为true\npagerSize 每页展示的文章数量\nsocial 社交快捷标识\n替换好后，我们看一看新的界面。这时我们的页面是不是就不像之前那么单调了呢！\nGithub常规部署 经过上面的步骤，我们已经有了自己的博客网站，但是这些页面只能在本地查看，能不能分享在网络上，让其他人也可以看到自己的博客呢？答案是肯定的！我们可以借助Github的静态网页托管进行。\n使用命令\n1 .\\hugo.exe -D hugo会自动“编译”当前的所有东西，并将结果输出到public路径下，我们只需要将该路径下的所有文件上传到Github仓库中，使用其免费的静态界面部署即可。注意：记得更改配置文件中的baseUrl哦！\n关于Github的静态网页托管，请参阅Github Pages或者跟着接下来的步骤进行简单的操作。\nStep 1 新建一个仓库 登录Github，点击右上角的+号，选择New repository 输入仓库名称，选择Public，点击Create repository\nGithub的每一个账户都有一个站点与无限个项目站点，一般而言，账户名对应的站点为https://\u0026lt;username\u0026gt;.github.io，项目站点为https://\u0026lt;username\u0026gt;.github.io/\u0026lt;projectname\u0026gt;。自己的个人博客一般选用账户站点，对应账户站点的仓库名应为\u0026lt;username\u0026gt;.github.io，输入仓库名，点击Create repository。看到下面的界面时说明你成功建立了自己的仓库。 Step 2 上传文件 在仓库页面，点击Upload files，选择public路径下的所有文件，点击Add files，输入文件名，点击Commit changes。\n如果你使用git命令工具的话，也可以使用以下命令或者页面提示的命令上传文件：\n1 2 3 4 5 git clone https://github.com/\u0026lt;username\u0026gt;/\u0026lt;username\u0026gt;.github.io.git cd \u0026lt;username\u0026gt;.github.io git add . git commit -m \u0026#34;Initial commit\u0026#34; git push Step 3 配置Github Pages 在仓库页面，点击Settings，选择Pages，Branch将None选为main分支，点击Save。 Step 4 查看效果 等待一段时间，刷新页面，当看到如下界面时，恭喜你，成功将自己的博客静态界面托管到了Github上，通过Visit Site即可成功访问啦。 Github自动部署 现在我们已经初步有了自己的个人博客网站啦！但是每次进行修改后，都需要手动进行“编译”和上传，这是一个比较繁琐的过程。有没有什么办法可以自动进行编译和上传呢？答案是肯定的！我们可以使用Github Actions来实现。\n通过下面的步骤，我们可以实现自动编译和上传。\nStep 1 创建新的 Github 仓库 首先，我们需要再次创建一个新的仓库，用于存放我们的主文件。\nStep 2 设置 Github Actions 创建完后，先不着急上传文件。\n在Github个人的Settings -\u0026gt; Developer Settings -\u0026gt; Personal access tokens中点击Generate new token创建一个新的token(classic)，注意保存好该token，后续会使用到。 token选择永不过期，并勾选 repo 和 workflow 选项。 注意，生成的Token只能查看一次，请注意将其复制保存到合适的位置！\n之后在，刚刚创建的新仓库中，进入仓库的Settings -\u0026gt; Secrets and variables -\u0026gt; Actions，点击New repository secret，命名秘密变量名名称以及其值。\nStep 3 创建工作流 在\u0026lt;Your Folder Name\u0026gt;路径下创建一个.github/workflows目录，在该目录下创建一个hugo.yml文件，内容如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 name: deploy # 代码提交到main分支时触发github action on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;latest\u0026#34; extended: true - name: Build Web run: hugo -D - name: Deploy Web uses: peaceiris/actions-gh-pages@v4 with: PERSONAL_TOKEN: ${{ secrets.你的token变量名 }} EXTERNAL_REPOSITORY: 你的github名/你的仓库名 PUBLISH_BRANCH: main PUBLISH_DIR: ./img/public commit_message: auto deploy 注意更改PERSONAL_TOKEN为你刚刚创建的token变量名以及EXTERNAL_REPOSITORY为你的仓库名称。\n我们暂时不需要了解这做了什么。如果你感兴趣，欢迎参阅【Github Actions】。\nStep 4 上传文件 在正式上传文件之前，我们需要在\u0026lt;Your Folder Name\u0026gt;下新建一个.gitignore文件，避免上传一些不必要的文件。\n在.gitignore文件中，添加以下内容：\n1 2 3 4 public resource .hugo_build.lock hugo.exe 之后将\u0026lt;Your Folder Name\u0026gt;路径下的所有文件上传到新的仓库中。\n每次当你将提交推送到main分支时，Github Actions就会自动触发，进行“编译”和上传。从而实现自动托管。\n通过上面的步骤，恭喜你，拥有了完全属于自己的个人博客页，接下来尽情发挥你的创意，享受无限可能吧！\n","date":"2025-07-23T15:39:39+08:00","image":"https://jzcse.github.io/p/%E6%95%99%E7%A8%8Bhugo--github%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/img/cover.svg","permalink":"https://jzcse.github.io/p/%E6%95%99%E7%A8%8Bhugo--github%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","title":"【教程】Hugo + Github免费搭建博客"}]